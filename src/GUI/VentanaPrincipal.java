/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Analizadores.Parser;
import Analizadores.Scanner;
import Clases.AFD;
import Clases.AutomataPila;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Desktop;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

/**
 *
 * @author ferna
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    // =========== Variables Globales para Reportes y Análisis ===========
    private ArrayList<String> listaTokens; // Para reporte de tokens
    private ArrayList<String> listaErrores; // Para reporte de errores
    private Parser parserResultante;
    private String ultimaCadenaValidada = "";

    public VentanaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("AutómataLab");
        agregarEventos(); // <--- AÑADE ESTA LÍNEA
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        entradatxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        salidatxt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportetxt = new javax.swing.JTextArea();
        nombrelbl = new javax.swing.JLabel();
        boxauto = new javax.swing.JComboBox<>();
        Bejecutar = new javax.swing.JButton();
        reporteshtml = new javax.swing.JButton();
        generarimagen = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        Archivomenu = new javax.swing.JMenu();
        nuevoarch = new javax.swing.JMenuItem();
        abrirarch = new javax.swing.JMenuItem();
        guardararch = new javax.swing.JMenuItem();
        reportesmenu = new javax.swing.JMenu();
        repotokens = new javax.swing.JMenuItem();
        repoerrores = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entradatxt.setColumns(20);
        entradatxt.setRows(5);
        jScrollPane1.setViewportView(entradatxt);

        salidatxt.setEditable(false);
        salidatxt.setColumns(20);
        salidatxt.setRows(5);
        jScrollPane2.setViewportView(salidatxt);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jLabel1.setText("SALIDA");

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jLabel2.setText("ENTRADA");

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jLabel3.setText("REPORTE");

        reportetxt.setEditable(false);
        reportetxt.setColumns(20);
        reportetxt.setRows(5);
        jScrollPane3.setViewportView(reportetxt);

        nombrelbl.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        nombrelbl.setText("AUTOMATALAB");

        boxauto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Bejecutar.setText("EJECUTAR");

        reporteshtml.setText("REPORTES");

        generarimagen.setText("GENERAR IMAGEN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(nombrelbl)
                            .addGap(18, 18, 18)
                            .addComponent(boxauto, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(generarimagen, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reporteshtml, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(Bejecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGap(20, 20, 20))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombrelbl)
                    .addComponent(boxauto, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bejecutar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reporteshtml)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generarimagen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        Archivomenu.setText("ARCHIVO");

        nuevoarch.setText("NUEVO");
        Archivomenu.add(nuevoarch);

        abrirarch.setText("ABRIR");
        Archivomenu.add(abrirarch);

        guardararch.setText("GUARDAR");
        Archivomenu.add(guardararch);

        jMenuBar2.add(Archivomenu);

        reportesmenu.setText("REPORTES");

        repotokens.setText("REPORTE TOKENS");
        reportesmenu.add(repotokens);

        repoerrores.setText("REPORTE ERRORES");
        reportesmenu.add(repoerrores);

        jMenuBar2.add(reportesmenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    /**
     * Acción que se ejecuta al presionar el botón "Ejecutar". Analiza el texto
     * de entrada, actualiza la consola de salida y el ComboBox.
     */
    private void accionEjecutar() {
        String textoEntrada = this.entradatxt.getText();
        if (textoEntrada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El área de entrada está vacía.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Limpiamos resultados anteriores
        this.salidatxt.setText("");
        this.reportetxt.setText("");
        this.listaTokens = new ArrayList<>();
        this.listaErrores = new ArrayList<>();

        try {
            // Creamos los analizadores a partir del texto en el JTextArea
            Scanner scanner = new Scanner(new BufferedReader(new StringReader(textoEntrada)), this.listaTokens, this.listaErrores);
            Parser parser = new Parser(scanner);
            parser.parse(); // Ejecutamos el análisis
            this.parserResultante = parser;
            // Extraer la última cadena validada para los reportes de pasos

            int ultimaValidacion = textoEntrada.lastIndexOf("(\"");
            if (ultimaValidacion != -1) {
                int fin = textoEntrada.lastIndexOf("\")");
                this.ultimaCadenaValidada = textoEntrada.substring(ultimaValidacion + 2, fin);
            }

            // Mostramos los resultados del análisis (salida de verAutomatas, desc, etc.)
            this.salidatxt.setText(parser.getSalidaConsola());

            // Actualizamos el ComboBox con los autómatas creados
            this.boxauto.removeAllItems();
            for (String nombreAutomata : parser.getAutomatas().keySet()) {
                this.boxauto.addItem(nombreAutomata);
            }

            JOptionPane.showMessageDialog(this, "Análisis completado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            this.salidatxt.setText("Ocurrió un error irrecuperable durante el análisis.\n" + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error durante el análisis.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Este método enlaza los eventos (como clics) con las acciones a realizar.
     */
    private void agregarEventos() {
        // --- Menú Archivo ---
        this.nuevoarch.addActionListener(e -> accionNuevoArchivo());
        this.abrirarch.addActionListener(e -> accionAbrirArchivo());
        this.guardararch.addActionListener(e -> accionGuardarArchivo());

        // --- Botón Ejecutar ---
        this.Bejecutar.addActionListener(e -> accionEjecutar());
        this.reporteshtml.addActionListener(e -> accionReportesHtml());
        this.generarimagen.addActionListener(e -> accionGenerarImagen());

        // --- Menú Reportes ---
        this.repotokens.addActionListener(e -> accionReporteTokens());
        this.repoerrores.addActionListener(e -> accionReporteErrores());
    }

    /**
     * Limpia el área de texto de entrada.
     */
    private void accionNuevoArchivo() {
        this.entradatxt.setText("");
        this.salidatxt.setText("");
        this.reportetxt.setText("");
        this.boxauto.removeAllItems();
        JOptionPane.showMessageDialog(this, "Área de trabajo limpiada.", "Nuevo", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Abre un explorador de archivos para cargar un archivo .atm.
     */
    private void accionAbrirArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Abrir Archivo");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Autómata (*.atm)", "atm"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
                this.entradatxt.read(reader, null);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Abre un explorador de archivos para guardar el contenido actual.
     */
    private void accionGuardarArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar Archivo como");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Autómata (*.atm)", "atm"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            // Asegurarse de que el archivo tenga la extensión .atm
            if (!archivo.getName().toLowerCase().endsWith(".atm")) {
                archivo = new File(archivo.getAbsolutePath() + ".atm");
            }
            try (PrintWriter writer = new PrintWriter(archivo)) {
                this.entradatxt.write(writer);
                JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente.", "Guardado", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Muestra el reporte de tokens en el JTextArea de reportes.
     */
    private void accionReporteTokens() {
        if (this.listaTokens == null || this.listaTokens.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay tokens para reportar. Ejecute el análisis primero.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("========== REPORTE DE TOKENS ==========\n\n");
        sb.append(String.format("%-5s | %-20s | %-20s | %-7s | %-7s\n", "#", "Lexema", "Tipo", "Línea", "Columna"));
        sb.append("-".repeat(70)).append("\n");

        for (String tokenInfo : this.listaTokens) {
            sb.append(tokenInfo).append("\n");
        }

        this.reportetxt.setText(sb.toString());
    }

    /**
     * Muestra el reporte de errores en el JTextArea de reportes.
     */
    private void accionReporteErrores() {
        if (this.listaErrores == null || this.listaErrores.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron errores.", "Información", JOptionPane.INFORMATION_MESSAGE);
            this.reportetxt.setText("========== REPORTE DE ERRORES ==========\n\nNo se encontraron errores durante el análisis.");
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("========== REPORTE DE ERRORES ==========\n\n");
        sb.append(String.format("%-5s | %-10s | %-40s | %-7s | %-7s\n", "#", "Tipo", "Descripción", "Línea", "Columna"));
        sb.append("-".repeat(90)).append("\n");

        for (String errorInfo : this.listaErrores) {
            sb.append(errorInfo).append("\n");
        }

        this.reportetxt.setText(sb.toString());
    }

    private void accionReportesHtml() {
        if (this.listaTokens == null || this.listaErrores == null) {
            JOptionPane.showMessageDialog(this, "Debe ejecutar un análisis primero.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Generar reporte de tokens
        String[] encabezadosTokens = {"#", "Lexema", "Tipo", "Línea", "Columna"};
        String rutaTokens = Utilidades.ReporteGenerator.generarHtmlReporte("Reporte de Tokens", encabezadosTokens, this.listaTokens);

        // Generar reporte de errores
        String[] encabezadosErrores = {"#", "Tipo", "Descripción", "Línea", "Columna"};
        String rutaErrores = Utilidades.ReporteGenerator.generarHtmlReporte("Reporte de Errores", encabezadosErrores, this.listaErrores);

        try {
            if (rutaTokens != null) {
                Desktop.getDesktop().browse(new File(rutaTokens).toURI());
            }
            if (rutaErrores != null) {
                Desktop.getDesktop().browse(new File(rutaErrores).toURI());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudieron abrir los reportes HTML.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void accionGenerarImagen() {
        if (this.parserResultante == null || this.boxauto.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un autómata después de ejecutar el análisis.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nombreAutomata = (String) this.boxauto.getSelectedItem();
        Clases.Automata automata = this.parserResultante.getAutomatas().get(nombreAutomata);

        if (automata != null) {
            // Lógica para el REPORTE DE AUTÓMATA
            try {
                // 1. Obtener la información textual y el grafo en DOT
                String infoTexto = automata.mostrarInfo(nombreAutomata);
                String dotSource = automata.generarDot(nombreAutomata);

                // 2. Crear una imagen a partir del texto
                BufferedImage imagenTexto = crearImagenDeTexto(infoTexto);

                // 3. Crear una imagen a partir del grafo con Graphviz
                File archivoGrafo = Utilidades.GraphvizGenerator.generarImagen("Automata_" + nombreAutomata, dotSource);
                if (archivoGrafo == null || !archivoGrafo.exists()) {
                    throw new Exception("Graphviz no pudo generar la imagen del grafo.");
                }
                BufferedImage imagenGrafo = ImageIO.read(archivoGrafo);

                // 4. Combinar ambas imágenes
                BufferedImage imagenFinal = combinarImagenes(imagenTexto, imagenGrafo);

                // 5. Guardar y abrir la imagen final
                File archivoSalida = new File(System.getProperty("java.io.tmpdir") + "Reporte_" + nombreAutomata + ".png");
                ImageIO.write(imagenFinal, "png", archivoSalida);
                abrirArchivo(archivoSalida.getAbsolutePath(), "imagen");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al generar el reporte visual: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // NUEVO MÉTODO AUXILIAR para abrir archivos
    private void abrirArchivo(String ruta, String tipoArchivo) {
        if (ruta != null) {
            try {
                Desktop.getDesktop().open(new File(ruta));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo abrir la " + tipoArchivo + " generada.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al generar la " + tipoArchivo + ". Asegúrese de que Graphviz esté instalado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    /**
     * Crea una imagen a partir de un bloque de texto.
     */
    private BufferedImage crearImagenDeTexto(String texto) {
        String[] lineas = texto.split("\n");
        int lineHeight = 20;
        int padding = 20;
        int width = 450; // Ancho fijo para la tabla de info
        int height = (lineas.length * lineHeight) + (2 * padding);

        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();

        // Fondo blanco
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, height);

        // Texto negro
        g2d.setColor(Color.BLACK);
        g2d.setFont(new Font("Consolas", Font.PLAIN, 16));

        // Dibujar cada línea de texto
        int y = padding + lineHeight;
        for (String linea : lineas) {
            g2d.drawString(linea, padding, y);
            y += lineHeight;
        }

        g2d.dispose();
        return image;
    }

    /**
     * Combina dos imágenes una al lado de la otra.
     */
    private BufferedImage combinarImagenes(BufferedImage img1, BufferedImage img2) {
        int padding = 20;
        int width = img1.getWidth() + img2.getWidth() + (3 * padding);
        int height = Math.max(img1.getHeight(), img2.getHeight()) + (2 * padding);

        BufferedImage combined = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = combined.createGraphics();

        // Fondo blanco
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, height);

        // Dibujar las dos imágenes
        g2d.drawImage(img1, padding, padding, null);
        g2d.drawImage(img2, img1.getWidth() + (2 * padding), padding, null);

        g2d.dispose();
        return combined;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivomenu;
    private javax.swing.JButton Bejecutar;
    private javax.swing.JMenuItem abrirarch;
    private javax.swing.JComboBox<String> boxauto;
    private javax.swing.JTextArea entradatxt;
    private javax.swing.JButton generarimagen;
    private javax.swing.JMenuItem guardararch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel nombrelbl;
    private javax.swing.JMenuItem nuevoarch;
    private javax.swing.JMenuItem repoerrores;
    private javax.swing.JButton reporteshtml;
    private javax.swing.JMenu reportesmenu;
    private javax.swing.JTextArea reportetxt;
    private javax.swing.JMenuItem repotokens;
    private javax.swing.JTextArea salidatxt;
    // End of variables declaration//GEN-END:variables
}
