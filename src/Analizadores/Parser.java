
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Clases.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\041\000\002\006\047\000" +
    "\002\023\003\000\002\023\003\000\002\011\005\000\002" +
    "\012\004\000\002\012\003\000\002\013\006\000\002\014" +
    "\007\000\002\014\005\000\002\015\005\000\002\016\004" +
    "\000\002\016\003\000\002\017\005\000\002\020\005\000" +
    "\002\020\003\000\002\021\017\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\022" +
    "\003\000\002\022\003\000\002\024\006\000\002\024\007" +
    "\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\014\004\011\007\013\010\014\017\005\021" +
    "\007\001\002\000\016\002\ufffe\004\ufffe\007\ufffe\010\ufffe" +
    "\017\ufffe\021\ufffe\001\002\000\004\023\142\001\002\000" +
    "\016\002\ufffd\004\ufffd\007\ufffd\010\ufffd\017\ufffd\021\ufffd" +
    "\001\002\000\004\023\034\001\002\000\016\002\ufffc\004" +
    "\ufffc\007\ufffc\010\ufffc\017\ufffc\021\ufffc\001\002\000\004" +
    "\032\030\001\002\000\016\002\ufffb\004\ufffb\007\ufffb\010" +
    "\ufffb\017\ufffb\021\ufffb\001\002\000\004\032\025\001\002" +
    "\000\004\032\021\001\002\000\016\002\000\004\011\007" +
    "\013\010\014\017\005\021\007\001\002\000\004\002\017" +
    "\001\002\000\004\002\001\001\002\000\016\002\uffff\004" +
    "\uffff\007\uffff\010\uffff\017\uffff\021\uffff\001\002\000\004" +
    "\004\022\001\002\000\004\033\023\001\002\000\004\013" +
    "\024\001\002\000\016\002\uffe2\004\uffe2\007\uffe2\010\uffe2" +
    "\017\uffe2\021\uffe2\001\002\000\004\033\026\001\002\000" +
    "\004\013\027\001\002\000\016\002\uffe3\004\uffe3\007\uffe3" +
    "\010\uffe3\017\uffe3\021\uffe3\001\002\000\004\005\031\001" +
    "\002\000\004\033\032\001\002\000\004\013\033\001\002" +
    "\000\016\002\uffe1\004\uffe1\007\uffe1\010\uffe1\017\uffe1\021" +
    "\uffe1\001\002\000\004\015\035\001\002\000\004\005\036" +
    "\001\002\000\004\016\037\001\002\000\006\004\040\024" +
    "\042\001\002\000\004\015\ufff8\001\002\000\004\015\043" +
    "\001\002\000\004\015\ufff7\001\002\000\004\011\044\001" +
    "\002\000\004\024\046\001\002\000\006\012\050\014\047" +
    "\001\002\000\006\012\uffe8\014\uffe8\001\002\000\004\024" +
    "\141\001\002\000\004\013\051\001\002\000\006\004\040" +
    "\024\042\001\002\000\004\015\053\001\002\000\004\011" +
    "\054\001\002\000\004\025\055\001\002\000\006\012\uffe6" +
    "\014\uffe6\001\002\000\006\012\060\014\057\001\002\000" +
    "\004\025\140\001\002\000\004\013\061\001\002\000\006" +
    "\004\040\024\042\001\002\000\004\015\063\001\002\000" +
    "\004\011\064\001\002\000\004\025\055\001\002\000\006" +
    "\012\066\014\057\001\002\000\004\013\067\001\002\000" +
    "\006\004\040\024\042\001\002\000\004\015\071\001\002" +
    "\000\004\011\072\001\002\000\004\024\073\001\002\000" +
    "\004\012\074\001\002\000\004\013\075\001\002\000\006" +
    "\004\040\024\042\001\002\000\004\015\077\001\002\000" +
    "\004\011\100\001\002\000\004\024\046\001\002\000\006" +
    "\012\102\014\047\001\002\000\004\013\103\001\002\000" +
    "\004\006\104\001\002\000\004\031\107\001\002\000\004" +
    "\022\106\001\002\000\016\002\ufff9\004\ufff9\007\ufff9\010" +
    "\ufff9\017\ufff9\021\ufff9\001\002\000\004\024\111\001\002" +
    "\000\006\022\ufff0\024\111\001\002\000\004\032\115\001" +
    "\002\000\006\022\uffee\024\uffee\001\002\000\006\013\135" +
    "\030\134\001\002\000\006\013\uffeb\030\uffeb\001\002\000" +
    "\006\025\116\026\120\001\002\000\004\033\uffe5\001\002" +
    "\000\004\033\121\001\002\000\004\033\uffe4\001\002\000" +
    "\004\027\122\001\002\000\004\032\123\001\002\000\006" +
    "\025\116\026\120\001\002\000\004\033\125\001\002\000" +
    "\004\014\126\001\002\000\004\024\127\001\002\000\004" +
    "\031\130\001\002\000\004\032\131\001\002\000\006\025" +
    "\116\026\120\001\002\000\004\033\133\001\002\000\006" +
    "\013\uffea\030\uffea\001\002\000\004\032\115\001\002\000" +
    "\006\022\uffed\024\uffed\001\002\000\006\013\uffec\030\uffec" +
    "\001\002\000\006\022\uffef\024\uffef\001\002\000\006\012" +
    "\uffe7\014\uffe7\001\002\000\006\012\uffe9\014\uffe9\001\002" +
    "\000\004\015\143\001\002\000\004\005\144\001\002\000" +
    "\004\016\145\001\002\000\006\004\040\024\042\001\002" +
    "\000\004\015\147\001\002\000\004\011\150\001\002\000" +
    "\004\024\046\001\002\000\006\012\152\014\047\001\002" +
    "\000\004\013\153\001\002\000\006\004\040\024\042\001" +
    "\002\000\004\015\155\001\002\000\004\011\156\001\002" +
    "\000\004\025\055\001\002\000\006\012\160\014\057\001" +
    "\002\000\004\013\161\001\002\000\006\004\040\024\042" +
    "\001\002\000\004\015\163\001\002\000\004\011\164\001" +
    "\002\000\004\024\165\001\002\000\004\012\166\001\002" +
    "\000\004\013\167\001\002\000\006\004\040\024\042\001" +
    "\002\000\004\015\171\001\002\000\004\011\172\001\002" +
    "\000\004\024\046\001\002\000\006\012\174\014\047\001" +
    "\002\000\004\013\175\001\002\000\004\006\176\001\002" +
    "\000\004\031\201\001\002\000\004\020\200\001\002\000" +
    "\016\002\ufffa\004\ufffa\007\ufffa\010\ufffa\017\ufffa\021\ufffa" +
    "\001\002\000\004\024\204\001\002\000\006\020\ufff6\024" +
    "\204\001\002\000\006\020\ufff4\024\ufff4\001\002\000\004" +
    "\027\205\001\002\000\004\025\207\001\002\000\006\013" +
    "\213\030\212\001\002\000\004\014\210\001\002\000\004" +
    "\024\211\001\002\000\006\013\ufff1\030\ufff1\001\002\000" +
    "\004\025\214\001\002\000\006\020\ufff3\024\ufff3\001\002" +
    "\000\004\014\215\001\002\000\004\024\216\001\002\000" +
    "\006\013\ufff2\030\ufff2\001\002\000\006\020\ufff5\024\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\016\002\015\003\014\004\003\005\005\006" +
    "\007\024\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\017\005\005\006\007\024\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\107\017\111\001\001\000\004\017" +
    "\136\001\001\000\006\020\112\021\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\201\013" +
    "\202\001\001\000\004\013\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Map<String, Automata> automatas = new HashMap<>();
    private StringBuilder salidaConsola = new StringBuilder();

    // Este método ahora guardará los errores en el StringBuilder para la GUI
    public void syntax_error(Symbol cur_token) {
        String errorMessage = "Error sintactico en la linea " + (cur_token.left + 1) + ", columna " + (cur_token.right + 1) + ". Token: " + cur_token.value + "\n";
        salidaConsola.append(errorMessage);
    }
    
    // Este método ahora guardará los errores en el StringBuilder para la GUI
    public void report_error(String message, Object info) {
        salidaConsola.append("Error: ").append(message).append("\n");
    }

    // --- Métodos para que la GUI obtenga los resultados ---
    public String getSalidaConsola() {
        return salidaConsola.toString();
    }
    
    public Map<String, Automata> getAutomatas() {
        return this.automatas;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= definicion_afd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= definicion_ap 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definicion_afd ::= TAG_AFD_A ATTR_NOMBRE IGUAL CADENA MAYOR keyword IGUAL LLAV_IZQ lista_estados LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ lista_simbolos LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ ESTADO LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ lista_estados LLAV_DER PT_COMA def_transiciones_afd TAG_AFD_C 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int n_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int n_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		String n_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int estadosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int estadosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		ArrayList<Character> estados = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int t_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int t_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		String t_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int alfabetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int alfabetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		ArrayList<Character> alfabeto = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int i_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int i_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String i_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String inicial = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int a_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int a_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aceptacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aceptacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Character> aceptacion = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int transicionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int transicionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Transicion> transiciones = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if (!n_kw.equals("N") || !t_kw.equals("T") || !i_kw.equals("I") || !a_kw.equals("A")) {
                            parser.report_error("Error Semantico: Se esperaba N, T, I, A para la definicion del AFD", null);
                        } else {
                            AFD nuevoAFD = new AFD(estados, alfabeto, aceptacion, inicial.charAt(0), transiciones);
                            parser.automatas.put(nombre, nuevoAFD);
                            salidaConsola.append("-> AFD '").append(nombre).append("' creado exitosamente.\n");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_afd",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definicion_ap ::= TAG_AP_A ATTR_NOMBRE IGUAL CADENA MAYOR keyword IGUAL LLAV_IZQ lista_estados LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ lista_simbolos LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ lista_simbolos LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ ESTADO LLAV_DER PT_COMA keyword IGUAL LLAV_IZQ lista_estados LLAV_DER PT_COMA def_transiciones_ap TAG_AP_C 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-33)).value;
		int n_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int n_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		String n_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int estadosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int estadosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		ArrayList<Character> estados = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int t_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int t_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		String t_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int alfabetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int alfabetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		ArrayList<Character> alfabeto = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int p_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int p_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		String p_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		ArrayList<Character> pila = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int i_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int i_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String i_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String inicial = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int a_kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int a_kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a_kw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aceptacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aceptacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Character> aceptacion = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int transicionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int transicionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<TransicionPila> transiciones = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         if (!n_kw.equals("N") || !t_kw.equals("T") || !p_kw.equals("P") || !i_kw.equals("I") || !a_kw.equals("A")) {
                            parser.report_error("Error Semantico: Se esperaba N, T, P, I, A para la definicion del AP", null);
                        } else {
                            AutomataPila nuevoAP = new AutomataPila(estados, alfabeto, aceptacion, inicial.charAt(0), pila, transiciones);
                            parser.automatas.put(nombre, nuevoAP);
                            salidaConsola.append("-> AP '").append(nombre).append("' creado exitosamente.\n");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_ap",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // keyword ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyword",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // keyword ::= ESTADO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyword",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_transiciones_afd ::= PR_TRANSI DOS_PUNTOS lista_trans_afd 
            {
              ArrayList<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Transicion> lista = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_transiciones_afd",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_trans_afd ::= lista_trans_afd transicion_afd 
            {
              ArrayList<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Transicion> lista = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Transicion> t = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.addAll(t); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_trans_afd",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_trans_afd ::= transicion_afd 
            {
              ArrayList<Transicion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Transicion> t = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_trans_afd",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // transicion_afd ::= ESTADO FLECHA cuerpo_trans_afd PT_COMA 
            {
              ArrayList<Transicion> RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Transicion> cuerpo = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 for(Transicion trans : cuerpo) { trans.nombreEstadoPrimero = origen.charAt(0); } RESULT = cuerpo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transicion_afd",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo_trans_afd ::= cuerpo_trans_afd VERTICAL SIMBOLO COMA ESTADO 
            {
              ArrayList<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Transicion> lista = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int simbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.add(new Transicion(simb.charAt(0), ' ', dest.charAt(0))); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_trans_afd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_trans_afd ::= SIMBOLO COMA ESTADO 
            {
              ArrayList<Transicion> RESULT =null;
		int simbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String simb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Transicion> n = new ArrayList<>(); n.add(new Transicion(simb.charAt(0), ' ', dest.charAt(0))); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_trans_afd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_transiciones_ap ::= PR_TRANSI DOS_PUNTOS lista_trans_ap 
            {
              ArrayList<TransicionPila> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<TransicionPila> lista = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_transiciones_ap",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_trans_ap ::= lista_trans_ap transicion_ap 
            {
              ArrayList<TransicionPila> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<TransicionPila> lista = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<TransicionPila> t = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.addAll(t); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_trans_ap",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_trans_ap ::= transicion_ap 
            {
              ArrayList<TransicionPila> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<TransicionPila> t = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_trans_ap",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // transicion_ap ::= ESTADO cuerpo_trans_ap PT_COMA 
            {
              ArrayList<TransicionPila> RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<TransicionPila> cuerpo = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 for(TransicionPila trans : cuerpo) { trans.nombreEstadoPrimero = origen.charAt(0); } RESULT = cuerpo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transicion_ap",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_trans_ap ::= cuerpo_trans_ap VERTICAL una_trans_ap 
            {
              ArrayList<TransicionPila> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<TransicionPila> lista = (ArrayList<TransicionPila>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TransicionPila t = (TransicionPila)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.add(t); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_trans_ap",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_trans_ap ::= una_trans_ap 
            {
              ArrayList<TransicionPila> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TransicionPila t = (TransicionPila)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<TransicionPila> n = new ArrayList<>(); n.add(t); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_trans_ap",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // una_trans_ap ::= PAR_IZQ simbolo_o_vacio PAR_DER FLECHA PAR_IZQ simbolo_o_vacio PAR_DER COMA ESTADO DOS_PUNTOS PAR_IZQ simbolo_o_vacio PAR_DER 
            {
              TransicionPila RESULT =null;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String entrada = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int extraeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int extraeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String extrae = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insertaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insertaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String inserta = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TransicionPila(entrada.charAt(0), ' ', dest.charAt(0), inserta.charAt(0), extrae.charAt(0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("una_trans_ap",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_estados ::= lista_estados COMA ESTADO 
            {
              ArrayList<Character> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Character> lista = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.add(e.charAt(0)); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_estados",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_estados ::= ESTADO 
            {
              ArrayList<Character> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Character> n = new ArrayList<>(); n.add(e.charAt(0)); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_estados",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_simbolos ::= lista_simbolos COMA SIMBOLO 
            {
              ArrayList<Character> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Character> lista = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lista.add(s.charAt(0)); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_simbolos ::= SIMBOLO 
            {
              ArrayList<Character> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Character> n = new ArrayList<>(); n.add(s.charAt(0)); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simbolo_o_vacio ::= SIMBOLO 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolo_o_vacio",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simbolo_o_vacio ::= VACIO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simbolo_o_vacio",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamada_funcion ::= PR_VER PAR_IZQ PAR_DER PT_COMA 
            {
              Object RESULT =null;
		
                        salidaConsola.append("\n======= LISTA DE AUTOMATAS CREADOS =======\n");
                        for (Map.Entry<String, Automata> entry : parser.automatas.entrySet()) {
                            String nombre = entry.getKey();
                            Automata automata = entry.getValue();
                            String tipo = (automata instanceof AFD) ? "Automata Finito Determinista" : "Automata de Pila";
                            salidaConsola.append("- ").append(nombre).append(" (").append(tipo).append(")\n");
                        }
                        salidaConsola.append("==========================================\n");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamada_funcion ::= PR_DESC PAR_IZQ ID PAR_DER PT_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        Automata a = parser.automatas.get(nombre);
                        if (a != null) {
                            salidaConsola.append(a.mostrarInfo(nombre));
                        } else { 
                            salidaConsola.append("Error: El automata '").append(nombre).append("' no existe.\n");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // llamada_funcion ::= ID PAR_IZQ CADENA PAR_DER PT_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        Automata a = parser.automatas.get(nombre);
                        if (a != null) {
                             if (a instanceof AutomataInterfaz) {
                                String resultado = ((AutomataInterfaz)a).validar(cadena);
                                salidaConsola.append(resultado).append("\n");
                            }
                        } else { 
                            salidaConsola.append("Error: El automata '").append(nombre).append("' no existe.\n");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
